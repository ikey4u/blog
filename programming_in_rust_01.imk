---
title = "Programming in Rust 2nd - Chapter 1: Systems Programmers Can Have Nice Things"
date = "2022-02-15"
author = ["ikey4u <pwnkeeper@gmail>"]
---

# 内存安全

- UB 安全

    在我们开始之前, 先看一个 C 程序

        int main(int argc, char **argv) {
            unsigned long a[1];
            a[3] = 0x7ffff7b36cebUL;
            return 0;
        }

    这段程序编译是没有问题的, 但是运行的时候就会 crash. 显然这个程序是有问题的, 数组的长度为 1,
    但是却访问了索引为 3 的元素, 这在 C 标准中, 该行为是 `未定义行为 (UB, Undefined Behaviour)`.

    不要认为 UB 只是说程序的行为结果是不可预测的, 实际上 UB 允许程序做任何事情. 为了防止 UB 行为,
    C 和 C++ 定义了许多标准来规避 UB, 比如不要除 0, 不要让算术操作的结果溢出等. 尽管有许多这样的标准,
    但是编译器并不强制执行这样的规则, 或者说编译器没有这样的义务来检测这些程序 UB,
    避免 UB 完全是程序员自己的事情.

    在 C/C++ 发展的几十年中, UB 行为实际上还是各种安全漏洞的主要来源之一, 那么 C/C++ 的程序员就会处于一种略显尴尬的地位:
    尽管 C/C++ 是一种系统级别的编程语言, 除了完成正常的开发需求之外, 还要求程序员保证程序的稳定运行且没有安全问题.

    所以 Rust 出现了, Rust 语言承诺, `如果程序通过了编译器检查, 那么保证该程序没有 UB`.
    也就是说, 野指针 (dangling pointer), double-free, 空指针异常 (null pointer dereference)
    等在编译时就会被检测到. 而数组则是通过编译时和运行时检查来确保访问安全.
    因此, Rust 在代码上的限制会比 C/C++ 更多, 但是总体上而言, 使用 Rust 并不会限制语言的表达能力,
    当然需要说明的是, 尽管 Rust 可以消除 UB 行为, 但是还是有许多 bug 是 Rust 不能检测到的,
    比如逻辑上的 bug 等.

- data-race 安全

    并行编程在 C/C++ 中是比较麻烦的, 很难正确使用. Rust 不仅保证没有 UB, 同时也保证多线程程序不会发生 data race,
    data race 是说, 多个线程同时操作了同一内存地址, 且其中至少有一个现场修改了内存地址上的内容,
    实际上 data race 也是导致漏洞的一大来源之一.

    如果你的数据不会发生改变, 那么你可以在多个线程间自由传递, 如果你的数据会发生改变,
    那么你需要通过同步原语对数据进行访问. Rust 提供了所有的同步原语工具, 比如 mutex, channel,
    atomic 等, Rust 会检测你是否正确使用了这些工具.

# 零抽象能力

C++ 提供零抽象能力, 即 C++ 之父说过的 `What you don’t use, you don’t pay for (in time or space) and further: What you do use, you couldn’t hand code any better`,
这句话同样也可以应用到 Rust 上. 如果你使用了语言提供的某个功能, 那么编译器生成的代码不会比人手动实现并使用这个功能获得的效果差.
如果你不使用语言提供的某个功能, 那么这个功能不会使已存在的代码变得更大或者更慢.

# 合作能力

Rust 提供了十分方便的构建工具和平台, 比如 Cargo 和托管第三方的平台 @a{crates.io}.

此外 Rust 在语言层面上提供了 trait 和泛型, 因此你可以创建灵活的库接口.
